# Configuração para deploy

## Primeiros passos

- Prepare o local_settings.py
- Crie o seu servidor Ubuntu 20.04 LTS (onde preferir)

## Comando para gerar SECRET_KEY

Comando para gerar SECRET_KEY para o arquivo local_settings.py:

python -c "import string as s;from secrets import SystemRandom as SR;print(''.join(SR().choices(s.ascii_letters + s.digits + s.punctuation, k=64)));"

Este comando irá imprimir uma string aleatória de 64 caracteres, que pode ser usada como valor para a variável SECRET_KEY no arquivo local_settings.py

## Criando sua chave SSH

ssh-keygen -C 'Seu nome <seu_email@gmail.com>'

## No servidor

### Conectando

ssh seu_usuario@seu_IP_SERVIDOR

### Comandos iniciais

### Os quatro comandos se referem as configurações Ubuntu 20.04
sudo apt update -y  
sudo apt upgrade -y
sudo apt autoremove -y
sudo apt install build-essential -y

### Instalando o Python

sudo add-apt-repository ppa:deadsnakes/ppa
sudo apt install python3.11 python3.11-venv -y

### Instalando o Nginx e o Certbot
sudo apt install nginx -y
sudo apt install certbot python3-certbot-nginx -y

### Instalando o Postgresql e o Git
sudo apt install postgresql postgresql-contrib -y
sudo apt install libpq-dev -y
sudo apt install git -y

### Configurando o git

git config --global user.name 'Seu nome'
git config --global user.email 'seu_email@gmail.com'
git config --global init.defaultBranch main

### Criando as pastas do projeto e repositório

mkdir ~/agendarepo ~/agendaapp

### Configurando os repositórios

### O bare serve para armazenar o repositório e o repo serve para armazenar o projeto. É feito antes pull nele para depois ir para o principal.

cd ~/agendarepo
git init --bare
cd ..
cd ~/agendaapp
git init
git remote add agendarepo ~/agendarepo
git add .
git commit -m 'Initial'
git push agendarepo main -u #erro

## No seu computador local

git remote add agendarepo usuario@IP_SERVIDOR:~/agendarepo
git pull agendarepo main --allow-unrelated-histories

# No servidor

cd ~/agendaapp
git pull agendarepo main

## Configurando o Postgresql

### abre o shell do postgresql

sudo -u postgres psql

postgres=# create role usuario_agenda with login superuser createdb createrole password 'senha_usuario_agenda';
CREATE ROLE
postgres=# create database projeto_agenda with owner usuario_agenda;
CREATE DATABASE
postgres=# grant all privileges on database projeto_agenda to usuario_agenda;
GRANT
postgres=# \q

sudo systemctl restart postgresql

## Criando o local_settings.py no servidor

### o nano é um vs code

nano ~/agendaapp/project/local_settings.py

Cole os dados.

## Configurando o Django no servidor

cd ~/agendaapp
python3.11 -m venv venv
. venv/bin/activate
pip install --upgrade pip
pip install django
pip install pillow
pip install gunicorn
pip install psycopg
pip install faker

python manage.py runserver
python manage.py migrate
python manage.py collectstatic
python manage.py createsuperuser

## Permitir arquivos maiores no nginx "servidor real"

sudo nano /etc/nginx/nginx.conf

Adicione em http {}:

client_max_body_size 30M;
sudo systemctl restart nginx