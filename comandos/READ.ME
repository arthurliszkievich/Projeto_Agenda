# Projeto Agenda (Django)

<!-- Badges (Opcional: Ex: Status do Build, Cobertura de Testes, Licença) -->
<!-- Ex: [![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT) -->

Uma aplicação web desenvolvida com Django para gerenciamento de contatos pessoais. Permite aos usuários cadastrar, criar, visualizar, editar, buscar e apagar seus contatos, organizando-os por categorias e adicionando fotos.

> **Status:** Em desenvolvimento

## Funcionalidades Principais

*   Autenticação de Usuários: Cadastro, Login e Logout.
*   Gerenciamento de Contatos (CRUD): Criar, Visualizar, Editar, Apagar.
*   Busca de Contatos.
*   Organização por Categorias.
*   Adição de Foto aos Contatos.
*   Paginação na lista de Contatos.
*   Interface Responsiva.

## Tecnologias Utilizadas

*   **Backend:** Python 3.11, Django 4.2 LTS (*Ajustamos para ser compatível com o Postgres 12*)
*   **Banco de Dados:** PostgreSQL (Produção / Deploy), MySQL (Desenvolvimento Local)
*   **Servidor WSGI:** Gunicorn
*   **Proxy Reverso / Servidor Web:** Nginx
*   **Frontend:** HTML, CSS, JavaScript (*Templates Django*)
*   **Infraestrutura de Deploy:** Ubuntu 20.04 LTS (Google Cloud Compute Engine)
*   **Outros:** Pillow (Manipulação de Imagens), Psycopg (Adaptador PostgreSQL), Git (Controle de Versão)

## Como Rodar Localmente (Desenvolvimento)

Siga os passos abaixo para configurar e executar o projeto em seu ambiente de desenvolvimento local:

1.  **Clone o repositório:**
    ```bash
    git clone https://github.com/arthurliszkievich/Projeto_Agenda.git
    cd Projeto_Agenda
    ```

2.  **Crie e ative um ambiente virtual:**
    ```bash
    # Linux/macOS
    python3 -m venv venv
    source venv/bin/activate

    # Windows
    python -m venv venv
    .\venv\Scripts\activate
    ```

3.  **Instale as dependências:**
    ```bash
    pip install -r requirements.txt
    ```

4.  **Configure as variáveis de ambiente / configurações locais:**
    *   Crie um arquivo `.env` na raiz do projeto **OU** um arquivo `local_settings.py` dentro da pasta `project`.
    *   **Importante:** Garanta que este arquivo (`.env` ou `local_settings.py`) esteja listado no seu arquivo `.gitignore` para não ser enviado ao GitHub!
    *   Defina as seguintes configurações mínimas (adapte conforme sua estrutura - `settings.py` lendo `.env` ou importando `local_settings.py`):
        ```python
        # Exemplo para local_settings.py ou variáveis em .env
        SECRET_KEY = 'sua_chave_secreta_local_aqui_(diferente_da_producao!)'
        DEBUG = True
        ALLOWED_HOSTS = ['127.0.0.1', 'localhost']

        # Exemplo usando SQLite para desenvolvimento local
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.sqlite3',
                'NAME': BASE_DIR / 'db.sqlite3',
            }
        }
        # OU configure para um PostgreSQL local se preferir testar com ele
        ```

5.  **Execute as migrações do banco de dados:**
    ```bash
    python manage.py migrate
    ```

6.  **Crie um superusuário (opcional, para acesso ao Admin Django):**
    ```bash
    python manage.py createsuperuser
    ```

7.  **Execute o servidor de desenvolvimento:**
    ```bash
    python manage.py runserver
    ```
    Acesse `http://127.0.0.1:8000/` no seu navegador.

## Nota sobre o Histórico do Banco de Dados

O ambiente de produção configurado para este projeto utiliza **PostgreSQL**. Mensagens de commit mais antigas no histórico do Git podem conter referências incorretas a outros bancos de dados (como MySQL ou SQLite) devido a fases anteriores de desenvolvimento e testes.

## Deploy

O deploy deste projeto foi realizado em um servidor Ubuntu 20.04 LTS no Google Cloud Compute Engine, utilizando Nginx como proxy reverso, Gunicorn como servidor WSGI e PostgreSQL como banco de dados. A configuração envolveu:

*   Configuração de repositórios Git (bare e checkout).
*   Instalação de dependências do sistema (Python, Nginx, Postgres, Git).
*   Configuração do banco de dados PostgreSQL (usuário, database).
*   Configuração do ambiente virtual Python e instalação de dependências do projeto.
*   Criação de arquivos de serviço Systemd (`.socket` e `.service`) para gerenciar o Gunicorn.
*   Configuração de um bloco de servidor Nginx (`sites-available`) para:
    *   Servir arquivos estáticos (`/static/`) e de mídia (`/media/`) diretamente.
    *   Atuar como proxy reverso para o socket do Gunicorn (`/`).
*   Configuração do firewall (UFW).


---